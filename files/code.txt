
console.log(sumSequence(1, 3)); // 1 + 2 + 3 = 6
console.log(sumSequence(2, 3)); // 2 + 3 = 5
console.log(sumSequence(2, 2)); // 2 = 2
console.log(sumSequence(1, 2)); // 1 + 2 = 3

// function sumSequence(start, end) {
//   if (start === end) {
//     return start;
//   } else {
//     const sum = start + end;
//     sumSequence(start+1, end);
//   }
// }

// 1 iteration - 1 + sumSequecen(?, ?)
// 2 iteration - 1 + 2 = 3

// 1 iteration 3 + sumsequence(1, 2)
// 2 iteration 2 + sumsequence(1, 1)

function sumSequence(start, end) {
  if (start === end) {
    return end;
  } else {
    return end + sumSequence(start, end - 1);
  }
}

//-------------------------------


var p = Promise.resolve(4);

p
.then(data => {
  console.log(data); // 4
  throw new Error('');
})
.catch(err => {
  console.log('err'); // err
})
.finally((data) => {
  console.log(data); // undefined
  return 1;
})
.then((data) => {
  console.log(data); // undefined
})


//-----------------------------------------


// Store - state - store data
// Reducers -> state1 => state2 - change state - change data
// Action => dispatch => trigger reducer - ???


// FETCH_USERS


// 1 Actions - snapshots - history
// 2 Actions  - metaknowledge



//--------------------------------------------------------------------

OBS 22.0.2

- Назначение структур данных: представление системы в удобном для работы виде

//--------------------------------------------------------------------

Замыкание
- В момент создания функции определяется ее лексическое окружение
- Скоуп скрытое свойство замененено на Энвайрмент

//--------------------------------------------------------------------

ПРОТОТИПЫ

Foo.prototype = {a: 2}; // тоже самое что и строка ниже
Foo.prototype.a = 2;    // тоже самое что и строка выше
function Foo() {}

const foo = new Foo();
console.log(foo); // => Foo {__proto__: { a:2 }}


-------

Person.__proto__ -> Function.prototype
Person.prototype.constructor.__proto__ -> Function.prototype


//--------------------------------------------------------------------

const fibArr = [0, 1];
const fibMap = {
    0: 0,
    1: 1,
}
- значение массивов хранятся в памяти последовательно, поэтому обращение будет быстрее
- объект может хранить свои значение по ссылке, придётся переходить по ссылке чтобы получить доступ к значению

//--------------------------------------------------------------------

js виртуальная машина - одна пространство памяти 
dom служба - другой пространство памяти

если запрашивать свойство у ДОМа, то в службу передается идентификатор элемента, там ищется адрес в памяти элемента,
читаются его свойства, передаются в обратную сторону, сериализуются в какой-то вид, после чего создается js-обертка
и получаем ответ

любое обращение к ДОМу даже на чтение это дополнительная нагрузка
виртуал дом оптимизирует не только запись, но и чтение, храня в себе информацию об объектах

узлы в дереве виртуал дом иммутабельны, когда поменяли стиль на одном узле поменялась ссылка у этого объекта
идёт сравнение ссылок

